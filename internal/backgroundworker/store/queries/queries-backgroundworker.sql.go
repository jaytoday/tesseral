// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries-backgroundworker.sql

package queries

import (
	"context"

	"github.com/google/uuid"
)

const getOrganization = `-- name: GetOrganization :one
SELECT
    id, project_id, display_name, scim_enabled, create_time, update_time, logins_disabled, log_in_with_google, log_in_with_microsoft, log_in_with_password, log_in_with_authenticator_app, log_in_with_passkey, require_mfa, log_in_with_email, log_in_with_saml, custom_roles_enabled, log_in_with_github, api_keys_enabled, log_in_with_oidc
FROM
    organizations
WHERE
    id = $1
`

func (q *Queries) GetOrganization(ctx context.Context, id uuid.UUID) (Organization, error) {
	row := q.db.QueryRow(ctx, getOrganization, id)
	var i Organization
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.DisplayName,
		&i.ScimEnabled,
		&i.CreateTime,
		&i.UpdateTime,
		&i.LoginsDisabled,
		&i.LogInWithGoogle,
		&i.LogInWithMicrosoft,
		&i.LogInWithPassword,
		&i.LogInWithAuthenticatorApp,
		&i.LogInWithPasskey,
		&i.RequireMfa,
		&i.LogInWithEmail,
		&i.LogInWithSaml,
		&i.CustomRolesEnabled,
		&i.LogInWithGithub,
		&i.ApiKeysEnabled,
		&i.LogInWithOidc,
	)
	return i, err
}

const getProject = `-- name: GetProject :one
SELECT
    id, organization_id, log_in_with_password, log_in_with_google, log_in_with_microsoft, google_oauth_client_id, microsoft_oauth_client_id, google_oauth_client_secret_ciphertext, microsoft_oauth_client_secret_ciphertext, display_name, create_time, update_time, logins_disabled, log_in_with_authenticator_app, log_in_with_passkey, log_in_with_email, log_in_with_saml, redirect_uri, after_login_redirect_uri, after_signup_redirect_uri, vault_domain, email_send_from_domain, cookie_domain, email_quota_daily, stripe_customer_id, entitled_custom_vault_domains, entitled_backend_api_keys, log_in_with_github, github_oauth_client_id, github_oauth_client_secret_ciphertext, api_keys_enabled, api_key_secret_token_prefix, audit_logs_enabled, log_in_with_oidc, custom_email_verify_email, custom_email_password_reset, custom_email_user_invite
FROM
    projects
WHERE
    id = $1
`

func (q *Queries) GetProject(ctx context.Context, id uuid.UUID) (Project, error) {
	row := q.db.QueryRow(ctx, getProject, id)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.LogInWithPassword,
		&i.LogInWithGoogle,
		&i.LogInWithMicrosoft,
		&i.GoogleOauthClientID,
		&i.MicrosoftOauthClientID,
		&i.GoogleOauthClientSecretCiphertext,
		&i.MicrosoftOauthClientSecretCiphertext,
		&i.DisplayName,
		&i.CreateTime,
		&i.UpdateTime,
		&i.LoginsDisabled,
		&i.LogInWithAuthenticatorApp,
		&i.LogInWithPasskey,
		&i.LogInWithEmail,
		&i.LogInWithSaml,
		&i.RedirectUri,
		&i.AfterLoginRedirectUri,
		&i.AfterSignupRedirectUri,
		&i.VaultDomain,
		&i.EmailSendFromDomain,
		&i.CookieDomain,
		&i.EmailQuotaDaily,
		&i.StripeCustomerID,
		&i.EntitledCustomVaultDomains,
		&i.EntitledBackendApiKeys,
		&i.LogInWithGithub,
		&i.GithubOauthClientID,
		&i.GithubOauthClientSecretCiphertext,
		&i.ApiKeysEnabled,
		&i.ApiKeySecretTokenPrefix,
		&i.AuditLogsEnabled,
		&i.LogInWithOidc,
		&i.CustomEmailVerifyEmail,
		&i.CustomEmailPasswordReset,
		&i.CustomEmailUserInvite,
	)
	return i, err
}

const getProjectWebhookSettings = `-- name: GetProjectWebhookSettings :one
SELECT
    id, project_id, app_id, create_time, update_time, direct_webhook_url
FROM
    project_webhook_settings
WHERE
    project_id = $1
`

func (q *Queries) GetProjectWebhookSettings(ctx context.Context, projectID uuid.UUID) (ProjectWebhookSetting, error) {
	row := q.db.QueryRow(ctx, getProjectWebhookSettings, projectID)
	var i ProjectWebhookSetting
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.AppID,
		&i.CreateTime,
		&i.UpdateTime,
		&i.DirectWebhookUrl,
	)
	return i, err
}

const getUserInvite = `-- name: GetUserInvite :one
SELECT
    id, organization_id, create_time, update_time, email, is_owner, role_id
FROM
    user_invites
WHERE
    id = $1
`

func (q *Queries) GetUserInvite(ctx context.Context, id uuid.UUID) (UserInvite, error) {
	row := q.db.QueryRow(ctx, getUserInvite, id)
	var i UserInvite
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.CreateTime,
		&i.UpdateTime,
		&i.Email,
		&i.IsOwner,
		&i.RoleID,
	)
	return i, err
}
